<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://blog.coderspirit.xyz/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.coderspirit.xyz/" rel="alternate" type="text/html" /><updated>2020-09-26T22:23:44+02:00</updated><id>https://blog.coderspirit.xyz/feed.xml</id><title type="html">Coder Spirit</title><subtitle>I'm Andrés Correa Casablanca. I work as a software engineer, but I have a scientist in my heart. I love mathematics, algorithms, AI, and machine learning.
</subtitle><author><name>Andrés Correa Casablanca</name><email>contact@coderspirit.xyz</email></author><entry><title type="html">Rust 2021</title><link href="https://blog.coderspirit.xyz/blog/2020/09/26/rust-2021/" rel="alternate" type="text/html" title="Rust 2021" /><published>2020-09-26T22:00:00+02:00</published><updated>2020-09-26T22:00:00+02:00</updated><id>https://blog.coderspirit.xyz/blog/2020/09/26/rust-2021</id><content type="html" xml:base="https://blog.coderspirit.xyz/blog/2020/09/26/rust-2021/">&lt;p&gt;First of all, a disclaimer: I’m quite new in the Rust community. Moreover, I’m
not even active in the Rust community. Not because of any particular reason,
somehow I usually don’t get involved into any sort of community. I wish I did,
but I lack the patience, focus and social skills.&lt;/p&gt;

&lt;p&gt;Having said that, I’m learning and using the technology, and I usually read the
news and articles written by other people involved in the project. I still
consider myself a newbie, so I don’t expect that anyone takes my opinion
seriously on how I wish Rust should evolve this next year. Not even myself!&lt;/p&gt;

&lt;h2 id=&quot;the-rust-foundation&quot;&gt;The Rust Foundation&lt;/h2&gt;

&lt;p&gt;This is something I was wishing for, and I’m happy it’s gonna happen soon, but
there are some details I consider important.&lt;/p&gt;

&lt;p&gt;I’m not the first one to say this: I think the Rust Foundation should be based
in the European Union and not in the USA. With all its contradictions (and dark
history), Europe still feels like a more open minded, tolerant, diverse and
safer place to be. In Europe there’s also more respect for human rights and
citizens’ privacy. I want the Rust community to fully embrace these values.&lt;/p&gt;

&lt;p&gt;There’s another reason for me beyond the “values” point. I want the Rust
community to be as big and open as possible, and this includes the “enemy” too.
USA seems to have a tradition on imposing bans and economic sanctions on their
“enemies”, and we have seen this attitude towards China recently.&lt;/p&gt;

&lt;p&gt;I won’t judge if these measures were reasonable or not, but I honestly fear that
they can negatively impact the Rust community as well, fragmenting it, or making
almost impossible for developers living in China to join it (or to just stay if
they were already in).&lt;/p&gt;

&lt;p&gt;Europe is not neutral, but at least is &lt;em&gt;more neutral&lt;/em&gt; than the USA.&lt;/p&gt;

&lt;h2 id=&quot;learning-materials--certifications&quot;&gt;Learning materials &amp;amp; certifications&lt;/h2&gt;

&lt;p&gt;The Rust project has plenty of useful official documentation:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rust-lang.org/learn&quot;&gt;Learning webpage&lt;/a&gt;: links to many “books”.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://rust-lang.github.io/rfcs/&quot;&gt;The RFCs book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides the “books”, there are some basic courses out there, and even some more
advanced materials, like the course
on &lt;a href=&quot;https://github.com/ferrous-systems/embedded-trainings-2020&quot;&gt;embedded programing with Rust, by Ferrous Systems&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But I still miss some “general” courses that help developers to dive deep into
more advanced topics, and that also help them to assess their own knowledge and
ultimately obtain a proof in the form of a certification to improve their
hireability.&lt;/p&gt;

&lt;p&gt;I see this as a potential source of income for the new Rust Foundation. This is
important not just from the financial perspective, but also when we consider the
need for some degree of independence from very big corporations.&lt;/p&gt;

&lt;h2 id=&quot;improved-support-from-online-cicd--related-services&quot;&gt;Improved support from online CI/CD (&amp;amp; related) services&lt;/h2&gt;

&lt;p&gt;Rust has plenty of powerful tools to ensure good code quality, but there’s need
for more tooling if we want to spread its usage. Most online CI/CD platforms
don’t have yet explicit support for Rust.&lt;/p&gt;

&lt;p&gt;We can see it when Github is not able to show us the dependencies trees, or when
it doesn’t tell us about known security problems in our dependencies (while it’s
able to do that for other tech stacks).&lt;/p&gt;

&lt;p&gt;In the case of CI/CD pipelines, I only saw explicit support for Rust in
TravisCI (which is useful in case you want to use complex build matrices).&lt;/p&gt;

&lt;p&gt;Same applies to many online static analysis services, whether they are focused
on code quality, or security. Among dozens of those services, I didn’t see a
single one providing explicit support for Rust.&lt;/p&gt;

&lt;p&gt;I think we should convince these companies to consider giving explicit support
to Rust developers in their products. Here is my first small contribution,
showing them that there’s real demand for it.&lt;/p&gt;

&lt;h2 id=&quot;safe-programming&quot;&gt;“Safe” programming&lt;/h2&gt;

&lt;p&gt;I started learning Rust in part because of its “safety” properties. Rust really
shines on this aspect, but I think it could be even better, and go beyond “just”
memory safety. If there’s anything that allow us to reduce the probability of
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;panic&lt;/code&gt; at runtime due to logic errors, it can be worth considering it.&lt;/p&gt;

&lt;p&gt;One case that comes to my mind is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Range&lt;/code&gt; type. As an amateur I noticed some
inconveniences, but I lacked a deep understanding to disect them and describe
the real problems behind these sensations. And then I found this 
&lt;a href=&quot;https://ridiculousfish.com/blog/posts/least-favorite-rust-type.html&quot;&gt;interesting article&lt;/a&gt;
on how we could improve it.&lt;/p&gt;

&lt;p&gt;Another thing that interests me is range-checked arithmetic (something in the
lines of what
&lt;a href=&quot;https://en.wikipedia.org/wiki/Ada_%28programming_language%29&quot;&gt;Ada&lt;/a&gt; provides,
with things like bounded integer types). I’m truly hopeful that “const generics”
will help to improve this aspect, although that’s only a starting point.&lt;/p&gt;

&lt;h2 id=&quot;new-ideas-for-safe-programming&quot;&gt;“New” ideas for safe programming&lt;/h2&gt;

&lt;p&gt;I’m not claiming that waht I’m gonna propose is new (or even worth pursuing!).
The research on programming languages has generated tons of very interesting
proposals that usually take years, if not decades, to be introduced into the
industry. So I guess someone already had this “same” idea, and probably
expressed it in a better way as well.&lt;/p&gt;

&lt;p&gt;Before explaining that, let’s check how we would create some types that add
extra information about some properties of scalar values.&lt;/p&gt;

&lt;p&gt;The “newtype” pattern is probably the best way to start:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Prime&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Option&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Some&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this approach we cannot easily combine the “primality check” with other
checks inside the information carried by the type, unless we create a specific
type for each combination of properties that we need.&lt;/p&gt;

&lt;p&gt;What I have in mind is some sort of “runtime type tags”, that can be “attached”
to values without conflicting with each other.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// This attribute would forbid having a parametric enum, and also would force&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// the compiler to generate an error if there is no associated &quot;tagger&quot;.&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[type_tag(for_scalar_type&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;i32]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Primality&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Prime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Composite&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Primality&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Type-Tagger functions should be &quot;const&quot;, and consume only inmutable&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// references.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[type_tagger(for_scalar_type&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;i32]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tagger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Primality&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[type_tag(for_scalar_type&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;i32]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoundedNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bounded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BelowBounds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;AboveBounds&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// I assume that a big part of const generics is implemented&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;impl&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoundedNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;#[type_tagger(for_scalar_type&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;i32]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;tagger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;BoundedNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BoundedNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BelowBounds&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BoundedNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bounded&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;BoundedNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Max&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AboveBounds&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;// The proposed syntax is just temptative. I'm not sure what would be the best&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// way to indicate that a value has been &quot;tagged&quot;, but it should support&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;// multiple tags for a single value.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;returns_prime_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeTagged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Primality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;only_accepts_prime_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeTagged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Primality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;only_accepts_prime_numbers_between_0_and_10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeTagged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Primality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeTagged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BoundedNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bounded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;only_accepts_numbers_outside_0_10_interval&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeTagged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BoundedNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bounded&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;example1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;23&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// In this case, it's possible to compute the tag at compilation time&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// because the tagger is const fn, and because x value is known.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;attach_const_type_tag!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Primality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;attach_const_type_tag!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BoundedNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// This should work as we know the type tag at compile time&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;only_accepts_prime_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;example2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// We can add multiple tags to an existing value without mutating it.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// These macro calls will implicitly call the tagger methods, and save the&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// generated type tags in the stack.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;attach_runtime_type_tag!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Primality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;attach_runtime_type_tag!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Parity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// This runtime &quot;type tag&quot; will be dropped from the stack once we leave&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// this context&lt;/span&gt;
        &lt;span class=&quot;nd&quot;&gt;attach_runtime_type_tag!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BoundedNumber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// This line would generate an compile-time error, since we don't know the&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// associated type tags at compile time.&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;only_accepts_prime_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// This should work. The type tags would be read from the stack and used to&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// choose between branches in this match expression.&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Notice that macros are not enough to implement this, some support at the&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// language level is required in order to ensure that the type signature of&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// the called function is respected.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;get_runtime_type_tag!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Primality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Primality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prime&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;only_accepts_prime_numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Primality&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Composite&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c&quot;&gt;// Assuming that 'Squarity' was defined, this should generate a compile-time&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// error, because we didn't add a Squarity type tag to x in this context.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;get_runtime_type_tag!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Squarity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Squarity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)),&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;Squarity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NoSquare&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To be honest, I’m not even sure if something like this is a good idea. The main
point is to make the type system more expressive, allowing to define constraints
on scalar values in a more flexible way.&lt;/p&gt;

&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;/h2&gt;

&lt;p&gt;From all the mentioned stuff, what worries me most is how the Rust community
will manage to evolve in an increasingly fragmented world. Economic conflicts
are too common, and new wars would not surprise the vast majority of us.&lt;/p&gt;

&lt;p&gt;We have to do our best to create a welcoming, diverse and respectful space that
helps people to create new bonds and keep them over time.&lt;/p&gt;</content><author><name>Andrés Correa Casablanca</name><email>contact@coderspirit.xyz</email></author><category term="Software Engineering" /><category term="Culture" /><category term="Opinion" /><summary type="html">First of all, a disclaimer: I’m quite new in the Rust community. Moreover, I’m not even active in the Rust community. Not because of any particular reason, somehow I usually don’t get involved into any sort of community. I wish I did, but I lack the patience, focus and social skills.</summary></entry><entry><title type="html">Introducing Avatar-CLI</title><link href="https://blog.coderspirit.xyz/blog/2020/08/22/introducing-avatar-cli/" rel="alternate" type="text/html" title="Introducing Avatar-CLI" /><published>2020-08-22T10:50:00+02:00</published><updated>2020-08-22T10:50:00+02:00</updated><id>https://blog.coderspirit.xyz/blog/2020/08/22/introducing-avatar-cli</id><content type="html" xml:base="https://blog.coderspirit.xyz/blog/2020/08/22/introducing-avatar-cli/">&lt;p&gt;These past weeks I’ve been working on a personal project called
&lt;a href=&quot;https://gitlab.com/avatar-cli/avatar-cli&quot;&gt;Avatar-CLI&lt;/a&gt;, a cli tool meant to ease
the usage of other containerized cli programs as if they were native.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2020/20200822_avatar_logo.png&quot; alt=&quot;Avatar-CLI Logo&quot; height=&quot;340px&quot; width=&quot;340px&quot; display=&quot;inline&quot; align=&quot;left&quot; margin=&quot;0px 0px&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Why I felt the need for such kind of tool? Well, this idea came to me around 3
years ago, while I was working in a team where some developers were using Linux,
and others were using Macos. Our development environments were quite
heterogeneous, and it was common to see problems related to each of us having
different versions of the same tools in our systems. If you are interested on
the story, you can watch this
&lt;a href=&quot;https://www.youtube.com/watch?v=zHuXnmmATHM&quot;&gt;Youtube video&lt;/a&gt; where I explain it.&lt;/p&gt;

&lt;p&gt;So, let’s fast forward in time to now. Avatar-CLI is cross-platform, and
provides a single statically linked binary for each system that allows us to
pinpoint versions for the software we use in our development environments,
ensuring that all members in a team are using exactly the same software.&lt;/p&gt;

&lt;p&gt;Avatar-CLI achieves its goals by relying on Docker. But as you would expect,
Docker is just one part of it. There are a lot of small challenges in order to
achieve a smooth developer experience; file permissions, integration with
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-agent&lt;/code&gt;, shell integration, being able to distinguish between interactive
and non-interactive modes, dealing with package manager caches, taking into
account that docker tags are mutable references…&lt;/p&gt;

&lt;h2 id=&quot;similar-projects&quot;&gt;Similar projects&lt;/h2&gt;

&lt;p&gt;Although by the time I came up with the idea of Avatar-CLI there was nothing
like that, I didn’t really start working on it after some years, and during that
time some tools with similar purposes appeared.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kudulab/dojo&quot;&gt;Dojo&lt;/a&gt; is probably one of the most known tools
among the potential competitors of Avatar-CLI, and it even appeared in the
&lt;a href=&quot;https://www.thoughtworks.com/radar/tools/dojo&quot;&gt;ThoughtWorks Technology Radar&lt;/a&gt;.
It has been developed in Go, and presents a different set of tradeoffs, more
specifically it imposes more requirements on the OCI images that can be used
with it, but it’s more mature on the side of supporting complex setups with
Docker Compose files.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;ttps://github.com/containers/toolbox&quot;&gt;“Toolbox”&lt;/a&gt; is a project mostly maintained
by RedHat developers which seems to be quite serious. Its main difference with
Avatar-CLI is that it uses a single “big” container that acts as a toolbox, with
everything installed inside; while Avatar-CLI creates different containers for
each program, and uses a non containerized subshell to expose those containers
as if they were native programs.&lt;/p&gt;

&lt;p&gt;Another project worth of mention is the
&lt;a href=&quot;https://nixos.org/&quot;&gt;Nix package manager&lt;/a&gt;, it shares our goal of having
predictable and well defined environments (and probably it does that better than
anyone else), but its ecosystem can’t compete with Docker’s one when it comes to
numbers.&lt;/p&gt;

&lt;h2 id=&quot;a-brief-demo&quot;&gt;A brief demo&lt;/h2&gt;

&lt;p&gt;If you want to see how it works, here there is a screencast I recorded a few
days ago:&lt;/p&gt;

&lt;script id=&quot;asciicast-353664&quot; src=&quot;https://asciinema.org/a/353664.js&quot; async=&quot;&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;how-im-developing-avatar-cli&quot;&gt;How I’m developing Avatar-CLI&lt;/h2&gt;

&lt;p&gt;There are many aspects that I would like to talk about, but I’ll try to
be succint here, and write down those things in other more specific blog posts.&lt;/p&gt;

&lt;h3 id=&quot;rust-as-the-main-language&quot;&gt;Rust as the main language&lt;/h3&gt;

&lt;p&gt;For Avatar-CLI I chose &lt;a href=&quot;https://www.rust-lang.org/&quot;&gt;Rust&lt;/a&gt;, a strongly typed
language that compiles “native” binaries. One of the main reasons was the
ability to generate single statically linked binaries, a property that hugely
simplifies the installation and usage of Avatar-CLI, and decreases the chances
of suffering problems due to missing dependencies.&lt;/p&gt;

&lt;p&gt;On that category of options, only C++ and &lt;a href=&quot;https://golang.org/&quot;&gt;Golang&lt;/a&gt; were
considered as serious contenders, but the lack of memory safety of C++, and the
lack of strong typing of Golang pushed the balance in favour of Rust.&lt;/p&gt;

&lt;p&gt;As an unexpected benefit, I discovered that Rust’s pattern matching was a very
powerful tool to ensure that I’m taking care of almost all relevant cases, which
helps me a lot to decrease the probability of suffering mysterious bugs.&lt;/p&gt;

&lt;h3 id=&quot;automation&quot;&gt;Automation&lt;/h3&gt;

&lt;p&gt;Besides the development of Avatar-CLI itself, I also had to automate many tasks
in the CI/CD pipelines. For that I chose
&lt;a href=&quot;https://docs.gitlab.com/ee/ci/introduction/&quot;&gt;Gitlab CI&lt;/a&gt; (that allows me to
easily use Docker-in-Docker setups) and
&lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;Typescript&lt;/a&gt;, that made very easy to write
powerful and flexible scripts to manage the pipelines and write some git hooks.&lt;/p&gt;

&lt;p&gt;Version numbering is generated automatically based on commit messages, and once
the code reaches the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;main&lt;/code&gt; branch, a new release is generated (this includes
generating Linux binaries, creating a &lt;a href=&quot;https://crates.io&quot;&gt;crates.io&lt;/a&gt; release and
pushing new OCI images to many registries).&lt;/p&gt;

&lt;h3 id=&quot;documentation&quot;&gt;Documentation&lt;/h3&gt;

&lt;p&gt;For Avatar-CLI I decided to have a
&lt;a href=&quot;https://gitlab.com/avatar-cli/aips&quot;&gt;specific repository for documentation&lt;/a&gt;,
where AIP (Avatar Improvement Proposal) documents will be written, follwing a
similar process to what Bitcoin has in place with its BIPs.&lt;/p&gt;

&lt;p&gt;Right now there isn’t too much stuff in there, as I focused almost all my
attention and energy on releasing something usable, but my aim is to be
exhaustive, in order to help new contributors to learn about the project
internals and why some decisions were made.&lt;/p&gt;

&lt;h3 id=&quot;the-roadmap&quot;&gt;The roadmap&lt;/h3&gt;

&lt;p&gt;Right now there is nothing written in stone, and most tasks are defined for the
near future, but you can see the short term plans in this
&lt;a href=&quot;https://gitlab.com/avatar-cli/avatar-cli/-/boards&quot;&gt;kanban board&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There are other tasks that I have in mind and are not written there because they
belong to other related projects, like working on the website, or even writing
articles like this one talking about the project.&lt;/p&gt;

&lt;p&gt;Having said that, if you want to be involved, please contact me and let me know,
I’m hoping that more people will join soon and transform Avatar-CLI into a
community project :) .&lt;/p&gt;</content><author><name>Andrés Correa Casablanca</name><email>contact@coderspirit.xyz</email></author><category term="Software Engineering" /><category term="Tooling" /><category term="Avatar-CLI" /><category term="Docker" /><category term="Rust" /><category term="Tooling" /><summary type="html">These past weeks I’ve been working on a personal project called Avatar-CLI, a cli tool meant to ease the usage of other containerized cli programs as if they were native.</summary></entry><entry><title type="html">Introduction to the Blockchain (Cryptocurrencies)</title><link href="https://blog.coderspirit.xyz/blog/2018/12/15/introduction-to-blockchain/" rel="alternate" type="text/html" title="Introduction to the Blockchain (Cryptocurrencies)" /><published>2018-12-15T16:00:00+01:00</published><updated>2018-12-15T16:00:00+01:00</updated><id>https://blog.coderspirit.xyz/blog/2018/12/15/introduction-to-blockchain</id><content type="html" xml:base="https://blog.coderspirit.xyz/blog/2018/12/15/introduction-to-blockchain/">&lt;p&gt;So… I wanted to write this article since 6 weeks ago, when I started to delve
into cryptocurrencies development, and today is the day :) .&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; First and foremost, I’m not a blockchain and/or cryptocurrencies
fanboy, neither a hater. I think the right way to approach this topic is through
highly critical thinking, a lot of patience and will to learn.&lt;/p&gt;

&lt;p&gt;There’s a lot of potential on this field, yet a lot of empty promises too, and
to discern what’s serious from what’s not one needs to dig deep… and believe
me, it’s a tough task. The field is deeper than one could imagine without having
previous exposition: the number of open questions &amp;amp; open problems is high, and
this is in part due to its interdisciplinary nature (cryptography, distributed
systems, networking, software &amp;amp; networks security, economics…).&lt;/p&gt;

&lt;p&gt;My aim here is not to write a tutorial, but to explain my own learning process,
and in order to do that I’ll continue writing more articles to talk about very
specific topics in almost self-contained texts.&lt;/p&gt;

&lt;p&gt;Having said that, I’ll center my attention on the cryptocurrencies landscape
rather than focusing on the more fuzzy “blockchain” term, because that’s what
I’m working on, and that’s where my learning experience is mostly focused.&lt;/p&gt;

&lt;p&gt;Let’s start then ☺. The story doesn’t really start with Bitcoin, but that will
be our first stop because it’s where all the pieces where put together for the
first time.&lt;/p&gt;

&lt;p&gt;Knowing about the following concepts is a pre-condition to advance through the
next steps without problems:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Hash_function&quot;&gt;Hash function&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Public-key_cryptography&quot;&gt;Asymmetric cryptography&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Digital_signature&quot;&gt;Digital signature&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Merkle_tree&quot;&gt;Merkle tree&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Peer-to-peer&quot;&gt;P2P Network&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I truly recommend to read this two articles in order:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hashcash.org/papers/hashcash.pdf&quot;&gt;Hashcash - A Denial of Service Counter-Measure, 2002, Adam Back&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bitcoin.org/bitcoin.pdf&quot;&gt;Bitcoin: A Peer-to-Peer Electronic Cash System, 2008, Satoshi Nakamoto&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first one introduces what’s nowadays commonly known as “Proof of Work”, and
it was mainly designed to make spamming more difficult, using it for electronic
currencies was a novel idea at the time (but introduced prior to the Bitcoin’s
outbreak).&lt;/p&gt;

&lt;p&gt;The second article is considered the foundational article of the blockchain &amp;amp;
cryptocurrencies fields. It introduces the “Nakamoto consensus” idea (consensus
between nodes achieved through “proof of work”) and the “blockchain” idea. It’s
worth to say that the word “blockchain” is not used in that paper,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Satoshi_Nakamoto&quot;&gt;Satoshi Nakamoto&lt;/a&gt; used
“proof-of-work chain” instead.&lt;/p&gt;

&lt;p&gt;The first Bitcoin implementation arrived some months after the article
publication, and it was done applying other relatively new inventions that were
not explicitly mentioned in the foundational article:
&lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Smart_contract&quot;&gt;smart contracts&lt;/a&gt;&lt;/em&gt;, an
&lt;a href=&quot;http://www.fon.hum.uva.nl/rob/Courses/InformationInSpeech/CDROM/Literature/LOTwinterschool2006/szabo.best.vwh.net/smart.contracts.html&quot;&gt;idea proposed by Nick Szabo in 1994&lt;/a&gt;
and extended in
&lt;a href=&quot;http://www.fon.hum.uva.nl/rob/Courses/InformationInSpeech/CDROM/Literature/LOTwinterschool2006/szabo.best.vwh.net/smart_contracts_2.html&quot;&gt;1996&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I have to say that the “smart contracts” concept was for me one of the hardest
points to understand when I started. I had previous knowledge about how the
blocks were chained, about the proof of work… but not about that. And it’s
easy to see why: it’s not mentioned at all in the Bitcoin paper, Nick Szabo’s
didn’t give too many clues about how they should work, and it’s difficult to
find good explanations about what they really are and how they work (most of
what you’ll find in the Internet is pure bullshit, empty words).&lt;/p&gt;

&lt;p&gt;One book where I found a pretty good explanation is
&lt;a href=&quot;http://shop.oreilly.com/product/0636920049524.do&quot;&gt;&lt;em&gt;“Mastering Bitcoin, 2nd Edition”&lt;/em&gt;&lt;/a&gt;,
written by &lt;em&gt;Andreas Antonopoulos&lt;/em&gt;. You can find an online and free version in
Github: &lt;a href=&quot;https://github.com/bitcoinbook/bitcoinbook&quot;&gt;bitcoinbook/bitcoinbook&lt;/a&gt;,
I truly recommend to read it if you’re just starting.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Notice:&lt;/strong&gt; Might be the case that at this point you are surprised, could be
that you read somewhere, or that somebody told you that the smart contracts were
introduced in &lt;em&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Ethereum&quot;&gt;Ethereum&lt;/a&gt;&lt;/em&gt;… but that’s
plainly wrong. Bitcoin also allows to implement smart contracts, and in fact it
uses them all the time.&lt;/p&gt;

&lt;p&gt;The key difference is on the capabilities that the scripts have in one platform
or another. While in Bitcoin the scripting capabilities were limited on purpose
to be non-Turing complete for security reasons,
&lt;a href=&quot;https://en.wikipedia.org/wiki/Vitalik_Buterin&quot;&gt;Vitalik Butterin&lt;/a&gt; proposed a way
to securely execute smart contracts without limiting their capabilities (it’s
worth to say that this came at a price, but I’ll leave this point for some
future article).&lt;/p&gt;

&lt;p&gt;Here I end my first and very brief post, but as a bonus I’ll link two
interesting articles about who could be the mysterious Satoshi Nakamoto:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@altcoinbuzz/why-i-think-nick-szabo-is-satoshi-nakamoto-even-though-he-denies-it-8c999841fbbb&quot;&gt;Why I think Nick Szabo is Satoshi Nakamoto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.forbes.com/sites/andygreenberg/2014/03/25/satoshi-nakamotos-neighbor-the-bitcoin-ghostwriter-who-wasnt/#f3c0e4c4a37d&quot;&gt;Nakamoto’s Neighbor&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andrés Correa Casablanca</name><email>contact@coderspirit.xyz</email></author><category term="Blockchain" /><category term="Cryptocurrencies" /><category term="Blockchain" /><category term="Cryptocurrencies" /><category term="Bitcoin" /><summary type="html">So… I wanted to write this article since 6 weeks ago, when I started to delve into cryptocurrencies development, and today is the day :) .</summary></entry><entry><title type="html">Web development jobs diagram</title><link href="https://blog.coderspirit.xyz/blog/2018/10/08/web-development-jobs-landscape/" rel="alternate" type="text/html" title="Web development jobs diagram" /><published>2018-10-08T16:45:00+02:00</published><updated>2018-10-08T16:45:00+02:00</updated><id>https://blog.coderspirit.xyz/blog/2018/10/08/web-development-jobs-landscape</id><content type="html" xml:base="https://blog.coderspirit.xyz/blog/2018/10/08/web-development-jobs-landscape/">&lt;p&gt;Yesterday evening I created this diagram to show how some web development jobs
are “connected”, I hope it can be useful for people looking what to do, but also
for HR people wanting to understand the web development landscape.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018/20181008_jobs_map.png&quot; alt=&quot;web development jobs landscape&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Postdata: I’ll try to be more active on this blog :) .&lt;/p&gt;</content><author><name>Andrés Correa Casablanca</name><email>contact@coderspirit.xyz</email></author><category term="Software Engineering" /><category term="Diagram" /><summary type="html">Yesterday evening I created this diagram to show how some web development jobs are “connected”, I hope it can be useful for people looking what to do, but also for HR people wanting to understand the web development landscape.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://blog.coderspirit.xyz/2018/20181008_jobs_map.png" /><media:content medium="image" url="https://blog.coderspirit.xyz/2018/20181008_jobs_map.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Our composer.json file is wrong</title><link href="https://blog.coderspirit.xyz/blog/2017/08/18/our-composer-json-is-wrong/" rel="alternate" type="text/html" title="Our composer.json file is wrong" /><published>2017-08-18T23:00:00+02:00</published><updated>2017-08-18T23:00:00+02:00</updated><id>https://blog.coderspirit.xyz/blog/2017/08/18/our-composer-json-is-wrong</id><content type="html" xml:base="https://blog.coderspirit.xyz/blog/2017/08/18/our-composer-json-is-wrong/">&lt;p&gt;I’m working for the &lt;a href=&quot;http://www.adsmurai.com/&quot;&gt;Adsmurai&lt;/a&gt; engineering team since
January, that’s around 8 months and a half right now. In this time, we’ve
advanced a lot in the direction of splitting a big code monolith into different
and isolated services.&lt;/p&gt;

&lt;p&gt;One tool that helped us a lot to achieve this goal was &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;.
We started with &lt;a href=&quot;https://hub.docker.com/_/ubuntu/&quot;&gt;Ubuntu-based images&lt;/a&gt; for our
development environment, that was the case during my first seven months.&lt;/p&gt;

&lt;p&gt;But then we wanted to use Docker in our production servers too for reasons that
are not important here: this is not a devops post! And at that point, we
realized that using &lt;a href=&quot;https://alpinelinux.org/&quot;&gt;Alpine Linux&lt;/a&gt; for our base images
could help us to save disk space, among other minor benefits. So we jumped to
&lt;a href=&quot;https://hub.docker.com/_/alpine/&quot;&gt;Alpine-based images&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And here is where our story really starts. Our applications started to crash…
because there were missing functions and interfaces.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://getcomposer.org/&quot;&gt;Composer&lt;/a&gt; didn’t complain about missing extensions,
but it was evident that something that we needed was not there. Our problem was
that Alpine, in order to obtain very little systems, splits its packages
whenever it makes sense, but that’s not the case with Ubuntu nor Debian, nor
other popular Linux distros.&lt;/p&gt;

&lt;p&gt;So, because many PHP extensions are pre-packaged in a single bundle for systems
like Debian, Ubuntu, RedHat, Centos… many developers forget to declare some
extensions as dependencies of their packages. Extensions that typically fall
into this category are: &lt;a href=&quot;http://php.net/manual/en/book.ctype.php&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ext-ctype&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://php.net/manual/en/book.fileinfo.php&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ext-fileinfo&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://php.net/manual/en/book.session.php&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ext-session&lt;/code&gt;&lt;/a&gt;,
&lt;a href=&quot;http://php.net/manual/en/book.tokenizer.php&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ext-tokenizer&lt;/code&gt;&lt;/a&gt;…&lt;/p&gt;

&lt;p&gt;This problem can be found across the entire &lt;a href=&quot;https://packagist.org/&quot;&gt;Packagist&lt;/a&gt;
packages repository, even if we look into the subset of super-popular packages,
like &lt;a href=&quot;http://symfony.com/&quot;&gt;Symfony&lt;/a&gt; components.&lt;/p&gt;

&lt;p&gt;To end this post: my advice is to read the PHP.net documentation when we’re
using special purpose functions  in order to know if they belong to an extension,
and declare such extensions as dependencies on our composer.json files.&lt;/p&gt;

&lt;p&gt;Best regards!&lt;/p&gt;</content><author><name>Andrés Correa Casablanca</name><email>contact@coderspirit.xyz</email></author><category term="Software Engineering" /><category term="PHP" /><category term="Adsmurai" /><category term="Alpine Linux" /><category term="Docker" /><summary type="html">I’m working for the Adsmurai engineering team since January, that’s around 8 months and a half right now. In this time, we’ve advanced a lot in the direction of splitting a big code monolith into different and isolated services.</summary></entry><entry><title type="html">Toy problem: The Traveler’s Dilemma</title><link href="https://blog.coderspirit.xyz/blog/2017/01/05/toy-problem-the-traverlers-dilemma/" rel="alternate" type="text/html" title="Toy problem: The Traveler’s Dilemma" /><published>2017-01-05T18:00:00+01:00</published><updated>2017-01-05T18:00:00+01:00</updated><id>https://blog.coderspirit.xyz/blog/2017/01/05/toy-problem-the-traverlers-dilemma</id><content type="html" xml:base="https://blog.coderspirit.xyz/blog/2017/01/05/toy-problem-the-traverlers-dilemma/">&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Traveler's_dilemma&quot;&gt;Traveler’s Dilemma&lt;/a&gt; is a generalization of the
&lt;a href=&quot;https://en.wikipedia.org/wiki/Prisoner's_dilemma&quot;&gt;Prisoner’s Dilemma&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The starting point of the problem is the following one: two people have lost identical baggage, and the airline company
offers them a monetary compensation.&lt;/p&gt;

&lt;p&gt;This two individuals have to tell the company which is the value of the lost baggage, and the company will pay the
lowest of the two mentioned values… with an extra complication: the humblest one will receive an extra compensation
of ¬€R$€¬, and the most ambitious will receive the stated value minus ¬€R$€¬.&lt;/p&gt;

&lt;p&gt;There are many variations of this problem, but we’ll use a prices range between ¬€0$€¬ and ¬€100$€¬ (both included), the
prize for being humble will be ¬€2$€¬, and the punishment for being too ambitious will be ¬€1$€¬ instead of ¬€2$€¬&lt;/p&gt;

&lt;p&gt;(I did some computations and I don’t want to repeat them with more “standard” parameters).&lt;/p&gt;

&lt;p&gt;The main interesting point of this dilemma is that, if we apply naive “rationality”, we fall in “prices war”: I start
with ¬€100$€¬ as a good starting point, and then I think that if I choose ¬€99$€¬, then I could win ¬€101$€¬, but
probably my oponent will think the same way, so maybe choosing ¬€98$€¬ is a better option, because then I can win
¬€100$€¬ instead of ¬€99$€¬, but my oponent will think the same way… and if we continue thinking, we’ll eventually
reach a proposal of ¬€1$€¬ or ¬€0$€¬…&lt;/p&gt;

&lt;h2 id=&quot;alternative-rationality&quot;&gt;Alternative rationality&lt;/h2&gt;

&lt;p&gt;Of course, real people aren’t so “rational”, and tend to propose higher prices than the lower bound. There are many
theories about why people are “irrational”, and of course many of these theories also try to improve our insight on the
strategies used in this sort of games
&lt;a href=&quot;http://journals.plos.org/plosone/article/file?id=10.1371/journal.pone.0072427&amp;amp;type=printable&quot;&gt;¹&lt;/a&gt;
&lt;a href=&quot;https://sci-hub.ac/10.1257/0002828054201431&quot;&gt;²&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Personally, I don’t like tagging as “irrational” some strategies when those strategies are far better than the ones
tagged as “rational”.&lt;/p&gt;

&lt;p&gt;Many years ago a simple solution crossed my mind after reading for the first time about this dilemma. The main idea was
simple: The classic “solution” has a good point (the “nested thoughts”), and a crucial error (the real target: earning
money, is forgotten and replaced by a surrogate one: earning more money than the opponent).&lt;/p&gt;

&lt;p&gt;So I used a probabilistic approach. We start with “a priori” distribution on the “decision space” for the opponent
decision, we compute the reward for every possible decision taking into account the “a priori” distribution… and then,
we construct a new distribution based on the computed rewards. As you can imagine, we need to do this iteratively until
the distribution converges.&lt;/p&gt;

&lt;p&gt;If you’ve payed attention, you’ll notice that there are some loose ends:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Will affect the chosen “a priori” distribution to the final solution?&lt;/li&gt;
  &lt;li&gt;It’s almost obvious that we have to use a monotonous growing function over the rewards to construct the next
distribution, but… there are a lot of functions, which one?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Fortunately, the “a priori” distribution doesn’t matter… (with a few exceptions), nor does the function! My exposition
isn’t rigorous at all, but is supported by “empirical” data.&lt;/p&gt;

&lt;p&gt;The only problematic distributions are the ones where the probabilities are concentrated on the lowest ¬€R€¬ possible
values (in our case, when only ¬€0$€¬ and ¬€1$€¬ have probabilities greater than zero).&lt;/p&gt;

&lt;p&gt;I started with the function ¬€f(x)=x€¬, and tried it with many random “a priori” distributions, obtaining the same final
solution every time:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/20170105_x_dist.png&quot; alt=&quot;final_solution_f_x&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this solution, the best options are ¬€97$€¬ and ¬€98$€¬ as the baggage prices. If we choose a higher degree
polynomial the best options will change, but not much, let’s see what happens with ¬€f(x)=x^{32}€¬, in this case the
best option is to pick ¬€97$€¬ as the baggage price:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/20170105_x32_dist.png&quot; alt=&quot;final_solution_f_x32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The distribution changes very smoothly respect to the polynomial exponent (this is why I’ve chosen a “big” exponent). We
have a soft change, but in any case, a significant change. This leads us to the question of how to choose the function
to transform the reward into a probability distribution.&lt;/p&gt;

&lt;p&gt;What seems more “rational” to me is to maximize the reward expectations, this is, approximately (but not exactly):&lt;/p&gt;

\[\sum^{100}_{x=0}x \cdot p\left(x\right)\]

&lt;p&gt;Where&lt;/p&gt;

\[p\left(x\right)=\frac{f\left(x\right)}{\sum^{100}_{x=0}f\left(x\right)}\]

&lt;p&gt;A good way to maximize the expected reward is to consider polynomials with very high exponents. Here you can see a graph
of the expected reward as a function of the polynomial exponent:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/20170105_reward_vs_exp.png&quot; alt=&quot;Reward vs exponent&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It is tempting to use a more drastic approach, giving a probability of 1 to the price with the highest associated
reward, and 0 to the other prices, but this approach is sensitive to the “a priori” distribution… and we don’t know
anything about our opponent, so our strategy should not depend on the initial chosen distribution.&lt;/p&gt;

&lt;h2 id=&quot;real-world-experiment&quot;&gt;“Real world” experiment&lt;/h2&gt;

&lt;p&gt;I’m pretty sure that the exposed approach is near optimal, but can we expect a similar behavior from people? I don’t
know, and I haven’t the time to conduct the required experiments.&lt;/p&gt;

&lt;p&gt;So I’ve used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sklearn&lt;/code&gt; to implement two &lt;a href=&quot;https://en.wikipedia.org/wiki/Multilayer_perceptron&quot;&gt;multilayer perceptron&lt;/a&gt;
instances. In first place, I’ve trained them using white noise to simulate a completely random behavior. I could use
only 4 white noise samples because using more noise samples makes impossible the training convergence.&lt;/p&gt;

&lt;p&gt;Every playing round, the perceptrons receive the results from the previous round and use them to decide which is their
next movement. The first round the perceptrons receive white noise because there is no previous historical data.&lt;/p&gt;

&lt;p&gt;We generate new samples every round, but every “player” keeps a completely subjective view of the world (the players
don’t learn from the errors of the other players).&lt;/p&gt;

&lt;p&gt;I didn’t find a way to generate training samples completely decoupled from my first intuition. So, to reduce coupling,
every player only learns part of the available info each round (if the player proposed the lowest number p, then it
learns the associated rewards of the prices greater than p, and the associated rewards of the prices lesser than p
otherwise).&lt;/p&gt;

&lt;p&gt;The results are the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2017/20170105_ai_competition.png&quot; alt=&quot;AI competition&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the perceptrons proposed prices converge to ¬€94€¬, which is similar to our previous values.&lt;/p&gt;

&lt;p&gt;A more interesting experiment might be training perceptrons to learn the best strategy depending on ¬€R€¬ rather than
depending on past movements (because depending on past movements only has sense when your opponent is always the same).
Anyway, this is work for another article.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE:&lt;/strong&gt; I’ve found these two interesting articles deepening into the exposed ideas, but with much more detail and
rigour:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.people.virginia.edu/~cah2k/tdweb.pdf&quot;&gt;Anomalous Behavior in a Traveler’s Dilemma?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.econ.cam.ac.uk/dae/repec/cam/pdf/cwpe1058.pdf&quot;&gt;A Reason for Unreason: Returns-Based Beliefs in Game Theory&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andrés Correa Casablanca</name><email>contact@coderspirit.xyz</email></author><category term="Economics" /><category term="Statistics" /><category term="Game Theory" /><category term="Mathematics" /><category term="Statistics" /><category term="Economics" /><category term="Game Theory" /><summary type="html">The Traveler’s Dilemma is a generalization of the Prisoner’s Dilemma.</summary></entry><entry><title type="html">Naive matrix multiplication Benchmark (PHP)</title><link href="https://blog.coderspirit.xyz/blog/2016/12/16/naive-matrix-multiplication-benchmark-php/" rel="alternate" type="text/html" title="Naive matrix multiplication Benchmark (PHP)" /><published>2016-12-16T18:00:00+01:00</published><updated>2016-12-16T18:00:00+01:00</updated><id>https://blog.coderspirit.xyz/blog/2016/12/16/naive-matrix-multiplication-benchmark-php</id><content type="html" xml:base="https://blog.coderspirit.xyz/blog/2016/12/16/naive-matrix-multiplication-benchmark-php/">&lt;p&gt;In my last post (&lt;a href=&quot;/blog/2016/12/01/php-sds-first-thoughts&quot;&gt;PHP-SDS First thoughts&lt;/a&gt;) I introduced the library &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHP-SDS&lt;/code&gt;.
Today I’ll talk about some performance benchmarks that I’ve been doing in order to optimize the polyfill code.&lt;/p&gt;

&lt;p&gt;The benchmark script has measured 8 different versions of the naive matrix multiplication algorithm:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt; vs Using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ds\Vector&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Contiguous values vs Nested rows&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I,J,K&lt;/code&gt; iteration order vs &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I,K,J&lt;/code&gt; iteration order.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I didn’t try to parallelize anything in any way, since PHP isn’t a well suited language to do this sort of things. I
didn’t try to implement the &lt;a href=&quot;https://en.wikipedia.org/wiki/Strassen_algorithm&quot;&gt;Strassen algorithm&lt;/a&gt; neither, because
first I want to have a solid baseline to compare (and because at some point, the Strassen algorithm should fallback to
the naive algorithm).&lt;/p&gt;

&lt;p&gt;Scripts used to benchmark and present data:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/castarco/5b051f9e7df04a2de87d3268f01ea461&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;matrix_benchmark.php&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gist.github.com/castarco/8591dc20e2740215709ede9566eaa826&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PHPMatrixBenchmarkPlot.ipynb&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;expectations-vs-reality&quot;&gt;Expectations vs Reality&lt;/h2&gt;

&lt;p&gt;In the first place, I should explain what my expectations were before the experiment. I thought that the best
combination would be (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ds\Vector&lt;/code&gt;, contiguous values, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I,K,J&lt;/code&gt;)…&lt;/p&gt;

&lt;p&gt;But the reality didn’t match my expectations, the best combination was (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt;, contiguous values, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;I,K,J&lt;/code&gt; ).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/20161216_matrix_benchmark.png&quot; alt=&quot;Matrix Benchmark&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Why I thought that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ds\Vector&lt;/code&gt; would offer better performance than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt; for matrix multiplications? The two main
reason were the smaller memory footprint, and the better performance of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ds\Vector&lt;/code&gt; on other operations.&lt;/p&gt;

&lt;p&gt;I imagined that less memory usage would lead to less cache misses, but probably I missinterpreted &lt;strong&gt;WHY&lt;/strong&gt; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ds\Vector&lt;/code&gt;
uses less memory than array. The reason was not that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ds\Vector&lt;/code&gt; uses less bytes per item, but that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ds\Vector&lt;/code&gt; uses a
“smarter”¹ algorithm to allocate memory regions in order to grow o shrink itself.&lt;/p&gt;

&lt;h2 id=&quot;why-ikj-runs-faster-than-ijk&quot;&gt;Why I,K,J runs faster than I,J,K?&lt;/h2&gt;

&lt;p&gt;Why my other two guesses are right? Well, it’s because the CPU cache.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Using a single data structure we avoid one indirection per read, and we can take more advandatge of data locality.&lt;/li&gt;
  &lt;li&gt;Traversing the matrix instances with the I,K,J order we ensure a row-by-row order (and even better, we can avoid
some redundant read operations). This way we have a &lt;a href=&quot;https://en.wikipedia.org/wiki/Cache-oblivious_algorithm&quot;&gt;cache-oblivious algorithm&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;final-thoughts&quot;&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;There are some benchmarks that I’d like to do in order to have a more precise image of what’s happening with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Ds\Vector&lt;/code&gt;.
I’ll measure isolated &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offsetGet&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offsetSet&lt;/code&gt; operations, and a combination of both (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;+=&lt;/code&gt; for example).&lt;/p&gt;

&lt;p&gt;Returning to my beloved matrix… In a fantastic &lt;strong&gt;@nikic&lt;/strong&gt;’s post
(&lt;a href=&quot;https://nikic.github.io/2014/12/22/PHPs-new-hashtable-implementation.html&quot;&gt;PHP’s new hastable implementation&lt;/a&gt;), we can
see that packed PHP arrays consume ~32 bytes per item. The Matrix use-case is “good” enough¹ to allow us storing raw
values without using wrappers.&lt;/p&gt;

&lt;p&gt;Typically, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;long&lt;/code&gt; &amp;amp; &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;double&lt;/code&gt; values take 8 bytes in 64 bit systems, so using a compiled extension we should be able to
divide the memory footprint by 4 (and store 4 times more items per cache line). If we allow less precision (using 32
bits instead of 64), then we can use less CPU time and memory.&lt;/p&gt;

&lt;p&gt;See you soon!&lt;/p&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Because it can rely on some assumptions that aren’t true for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;array&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Andrés Correa Casablanca</name><email>contact@coderspirit.xyz</email></author><category term="Data Engineering" /><category term="PHP" /><category term="PHP-DS" /><category term="PHP-SDS" /><category term="Data Engineering" /><category term="Benchmark" /><summary type="html">In my last post (PHP-SDS First thoughts) I introduced the library PHP-SDS. Today I’ll talk about some performance benchmarks that I’ve been doing in order to optimize the polyfill code.</summary></entry><entry><title type="html">PHP-SDS First Thoughts</title><link href="https://blog.coderspirit.xyz/blog/2016/12/01/php-sds-first-thoughts/" rel="alternate" type="text/html" title="PHP-SDS First Thoughts" /><published>2016-12-01T18:00:00+01:00</published><updated>2016-12-01T18:00:00+01:00</updated><id>https://blog.coderspirit.xyz/blog/2016/12/01/php-sds-first-thoughts</id><content type="html" xml:base="https://blog.coderspirit.xyz/blog/2016/12/01/php-sds-first-thoughts/">&lt;p&gt;Some days have passed since my last contribution to &lt;a href=&quot;https://github.com/SciPHPy/php-sds-polyfill&quot;&gt;PHP-SDS&lt;/a&gt;, but today
I’ve returned, and my first step will be telling something about this project.&lt;/p&gt;

&lt;p&gt;The name of this PHP library isn’t very imaginative: “Scientific Data Structures”. The data structures aren’t scientific
or unscientific :s , but there is an extension called “&lt;a href=&quot;https://github.com/php-ds&quot;&gt;PHP-DS&lt;/a&gt;” (PHP Data Structures), which
provides basic data structures, and PHP-SDS aims to provide “data-science related data structures”… so, that’s it.&lt;/p&gt;

&lt;p&gt;My idea was to port some features from three interesting Python projects to PHP: &lt;a href=&quot;http://pandas.pydata.org/&quot;&gt;Pandas&lt;/a&gt;,
&lt;a href=&quot;http://www.numpy.org/&quot;&gt;Numpy&lt;/a&gt; and &lt;a href=&quot;https://www.tensorflow.org/&quot;&gt;TensorFlow&lt;/a&gt;. The basic data structures that will be
implemented are Matrix, DataFrame and Tensor (the “same” as Numpy’s ndarray).&lt;/p&gt;

&lt;p&gt;As today, almost all the meaningful features of the Tensor data structure have been developed in pure PHP, plus some
basic features of the Matrix class.&lt;/p&gt;

&lt;p&gt;So? Well, the actual code is pure PHP, but it is a sort of prototype/polyfill. I want to implemenet a PHP extension to
boost performance for certain data related operations, and I want to implement that extension using Rust.&lt;/p&gt;

&lt;p&gt;There are a lot of things to do, finishing the Matrix and DataFrame classes in the polyfill library, add some data
importing/exporting features, and then start coding the extension using Rust. You’re welcome if you want to become
involved :) .&lt;/p&gt;

&lt;p&gt;These are the main sources I’m using to obtain inspiration:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://hermanradtke.com/2015/08/03/creating-a-php-extension-to-rust.html&quot;&gt;Creating a PHP Extension to Rust&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jaredonline.svbtle.com/creating-a-php-extension-in-rust&quot;&gt;Creating a PHP extension in Rust&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://devzone.zend.com/303/extension-writing-part-i-introduction-to-php-and-zend&quot;&gt;Extension Writing Part I: Introduction to PHP and Zend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://devzone.zend.com/317/extension-writing-part-ii-parameters-arrays-and-zvals&quot;&gt;Extension Writing Part II: Parameters, Arrays, and ZVALS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andrés Correa Casablanca</name><email>contact@coderspirit.xyz</email></author><category term="Data Engineering" /><category term="PHP" /><category term="PHP-SDS" /><category term="Rust" /><category term="Data Engineering" /><summary type="html">Some days have passed since my last contribution to PHP-SDS, but today I’ve returned, and my first step will be telling something about this project.</summary></entry><entry><title type="html">Generating Colored Gosper Curves</title><link href="https://blog.coderspirit.xyz/blog/2016/04/03/gosper-curve/" rel="alternate" type="text/html" title="Generating Colored Gosper Curves" /><published>2016-04-03T19:00:00+02:00</published><updated>2016-04-03T19:00:00+02:00</updated><id>https://blog.coderspirit.xyz/blog/2016/04/03/gosper-curve</id><content type="html" xml:base="https://blog.coderspirit.xyz/blog/2016/04/03/gosper-curve/">&lt;p&gt;Yesterday I finished a script to generate colored &lt;a href=&quot;https://en.wikipedia.org/wiki/Gosper_curve&quot;&gt;Gosper Curves&lt;/a&gt;. You can
find it in Github, as a Gist:
&lt;a href=&quot;https://gist.github.com/castarco/58826fa6a880cff69e1d987ce2037a1f&quot;&gt;gosper_curve.py&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The main idea behind this code is to generate an ordered list of points using a
&lt;a href=&quot;https://en.wikipedia.org/wiki/L-system&quot;&gt;L-system&lt;/a&gt; (a set of production rules combined with a mechanism for translating
the generated strings into geometric structures).&lt;/p&gt;

&lt;p&gt;One extra idea I’ve applied is to work with the HSL color space instead of the RGB color space, this way I can do a
random walk over the Hue dimension (with “smooth” steps) keeping lightness and saturation as constants.&lt;/p&gt;

&lt;p&gt;And this is one of the generated images:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2016/gosper_curve.png&quot; alt=&quot;Gosper Curve&quot; /&gt;&lt;/p&gt;</content><author><name>Andrés Correa Casablanca</name><email>contact@coderspirit.xyz</email></author><category term="Hobbies" /><category term="Fractals" /><category term="Geometry" /><category term="Mathematics" /><category term="Generative Art" /><category term="Art" /><summary type="html">Yesterday I finished a script to generate colored Gosper Curves. You can find it in Github, as a Gist: gosper_curve.py.</summary></entry><entry><title type="html">Dealing with precise timestamps in PHP</title><link href="https://blog.coderspirit.xyz/blog/2015/11/08/dealing-with-precise-timestamps-on-php/" rel="alternate" type="text/html" title="Dealing with precise timestamps in PHP" /><published>2015-11-08T18:00:00+01:00</published><updated>2015-11-08T18:00:00+01:00</updated><id>https://blog.coderspirit.xyz/blog/2015/11/08/dealing-with-precise-timestamps-on-php</id><content type="html" xml:base="https://blog.coderspirit.xyz/blog/2015/11/08/dealing-with-precise-timestamps-on-php/">&lt;p&gt;PHP does not offer any native class to implement timestamps with milliseconds or microseconds precision, the only
“native” way to do it is working with the weird microtime function and/or the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\MongoDate&lt;/code&gt; class (available through the
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mongo&lt;/code&gt; extension).&lt;/p&gt;

&lt;p&gt;Using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\DateTime&lt;/code&gt; class is not enough, because it only can offer seconds precision, and using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;\MongoDate&lt;/code&gt; class
isn’t a good idea if you aren’t using MongoDB or if you care about coupling. In fact, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mongo&lt;/code&gt; extension will be
deprecated in a few months in favour of a new extension that is in active development right now.&lt;/p&gt;

&lt;p&gt;Because this, I’ve developed two Composer packages to allow using type hinting without increasing coupling and with less
abstraction leaks:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;PHP-Jiffy, a library that provides a timestamp class with milliseconds (and   even microseconds) precision:
&lt;a href=&quot;https://github.com/Litipk/php-jiffy/&quot;&gt;https://github.com/Litipk/php-jiffy/&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Doctrine MongoDB Jiffy, an addapter to use the PHP-Jiffy library with Doctrine’s MongoDB ODM:
&lt;a href=&quot;https://github.com/Litipk/doctrine-mongodb-jiffy&quot;&gt;https://github.com/Litipk/doctrine-mongodb-jiffy&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Is my intention to modify the PHP-Jiffy library at the same time of the new MongoDB’s extension release, so it will be
very useful for people who likes moving fast to new software versions.&lt;/p&gt;</content><author><name>Andrés Correa Casablanca</name><email>contact@coderspirit.xyz</email></author><category term="Backend Development" /><category term="PHP" /><category term="Timestamps" /><category term="Doctrine" /><category term="MongoDB" /><summary type="html">PHP does not offer any native class to implement timestamps with milliseconds or microseconds precision, the only “native” way to do it is working with the weird microtime function and/or the \MongoDate class (available through the mongo extension).</summary></entry></feed>